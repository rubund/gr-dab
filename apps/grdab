#!/usr/bin/env python
#
# Copyright 2018 by Ruben Undheim
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this software; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.


import argparse
import sys

import grdab.app

parser = argparse.ArgumentParser(description='DAB radio (grdab)')
subparsers = parser.add_subparsers()

parser_receive = subparsers.add_parser('receive', help='Receive DAB+ audio')
parser_receive.add_argument("-f","--freq", help="Frequency in MHz", type=float, default=220.352)
parser_receive.add_argument("-a","--audiorate", help="Audio sample rate in Hz", type=int, default=48000)
parser_receive.add_argument("--bit_rate", help="", type=int, default=64)
parser_receive.add_argument("--address", help="", type=int, default=304)
parser_receive.add_argument("--subch_size", help="", type=int, default=64)
parser_receive.add_argument("--protect_level", help="", type=int, default=1)

parser_info = subparsers.add_parser('info', help='Get channel details')
parser_info.add_argument("-f","--freq", help="Frequency in MHz", type=float, default=220.352)

parser_adjust = subparsers.add_parser('adjust', help='Find optimum gain and freq error ppm settings')
parser_adjust.add_argument("-f","--freq", help="Frequency in MHz", type=float, default=220.352)

import grdab.app.config
import os
cfg_dir = "".join([os.getenv("HOME"),"/.grdab"])
cfg = grdab.app.config.Configuration(cfg_dir)

rf_gain = 50
if_gain = 0
bb_gain = 0
ppm = 0

if "gain" in cfg.adjust_config:
  rf_gain = cfg.adjust_config["gain"]["gain_rf"]
  if_gain = cfg.adjust_config["gain"]["gain_if"]
  bb_gain = cfg.adjust_config["gain"]["gain_bb"]

if "ppm" in cfg.adjust_config:
  ppm     = cfg.adjust_config["ppm"]

def receive_handler(res):
  print("receive handler")
  grdab.app.receive_dabplus(frequency=(res.freq*1e6), rf_gain=rf_gain, if_gain=if_gain, bb_gain=bb_gain, ppm=ppm, audio_sample_rate=res.audiorate, dab_bit_rate=res.bit_rate, dab_address=res.address, dab_subch_size=res.subch_size, dab_protect_level=res.protect_level)

def info_handler(res):
  print("info handler")
  grdab.app.get_channels(frequency=(res.freq*1e6), rf_gain=rf_gain, if_gain=if_gain, bb_gain=bb_gain, ppm=ppm)

def adjust_handler(res):
  import grdab.app.adjustment_gui
  print("will open GUI to adjust gain and ppm")

  import ctypes
  import sys
  if sys.platform.startswith('linux'):
      try:
          x11 = ctypes.cdll.LoadLibrary('libX11.so')
          x11.XInitThreads()
      except:
          print "Warning: failed to XInitThreads()"

  class SubClass(grdab.app.adjustment_gui.top_block):

    def __init__(self):
      super(SubClass, self).__init__(frequency_id_default=26, gain_rf_default=rf_gain, gain_if_default=if_gain, gain_bb_default=bb_gain, ppm_default=ppm)

    def set_variable_qtgui_push_button_0(self, val):
      self.variable_qtgui_push_button_0 = val
      if val == 1:
        import grdab.app.config
        import os
        cfg_dir = "".join([os.getenv("HOME"),"/.grdab"])
        cfg = grdab.app.config.Configuration(cfg_dir)
        cfg.adjust_config = {"gain" : {"gain_rf" : self.get_gain_slider(), "gain_if" : self.get_gain_if(), "gain_bb" : self.get_gain_bb()}, "ppm" : self.get_ppm()}
        cfg.save()

  tp = SubClass

  grdab.app.adjustment_gui.main(tp)
  #grdab.app.tune_gain_and_ppm.main(rf_gain=rf_gain, if_gain=if_gain, bb_gain=bb_gain, ppm=ppm)

parser_receive.set_defaults(func=receive_handler)
parser_info.set_defaults(func=info_handler)
parser_adjust.set_defaults(func=adjust_handler)
args = parser.parse_args()

args.func(args)

