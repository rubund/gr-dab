/* -*- c++ -*- */
/*
 * Copyright 2004 Free Software Foundation, Inc.
 * 
 * This file is part of GNU Radio
 * 
 * GNU Radio is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * GNU Radio is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with GNU Radio; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

/*
 * config.h is generated by configure.  It contains the results
 * of probing for features, options etc.  It should be the first
 * file included in your .cc file.
 */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <gnuradio/io_signature.h>
#include "repartition_vectors_impl.h"

namespace gr {
  namespace dab {

repartition_vectors::sptr
repartition_vectors::make(size_t itemsize, unsigned int vlen_in, unsigned int vlen_out, unsigned int multiply, unsigned int divide)
{
  return gnuradio::get_initial_sptr
    (new repartition_vectors_impl(itemsize, vlen_in, vlen_out, multiply, divide));
}

repartition_vectors_impl::repartition_vectors_impl(size_t itemsize, unsigned int vlen_in, unsigned int vlen_out, unsigned int multiply, unsigned int divide)
  : gr::block("repartition_vectors",
             gr::io_signature::make2 (2, 2, itemsize*vlen_in, sizeof(char)),
             gr::io_signature::make2 (2, 2, itemsize*vlen_out, sizeof(char))),
  d_itemsize(itemsize), d_vlen_in(vlen_in), d_vlen_out(vlen_out), d_multiply(multiply), d_divide(divide), d_synced(0)
{
  assert(vlen_in * multiply == vlen_out * divide);
  set_output_multiple(divide);
}

void 
repartition_vectors_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
{
  int in_req  = noutput_items / d_divide * d_multiply;

  unsigned ninputs = ninput_items_required.size ();
  for (unsigned i = 0; i < ninputs; i++)
    ninput_items_required[i] = in_req;
}

int 
repartition_vectors_impl::general_work (int noutput_items,
                        gr_vector_int &ninput_items,
                        gr_vector_const_void_star &input_items,
                        gr_vector_void_star &output_items)
{
  const char *iptr = (const char *) input_items[0];
  const char *trigger = (const char *) input_items[1];
  
  char *optr = (char *) output_items[0];
  char *triggerout = (char *) output_items[1];

  int n_consumed = 0;
  int n_produced = 0;

  while (d_synced==0 && ninput_items[0]>n_consumed && ninput_items[1]>n_consumed) {
    if (*trigger == 1) {
      d_synced=1;
    } else {
      n_consumed++;
      iptr += d_vlen_in*d_itemsize;
      trigger++;
    }
  }

  while (n_consumed + (int)d_multiply <= ninput_items[0] && n_consumed + (int)d_multiply <= ninput_items[1] && n_produced + (int)d_divide <= noutput_items) {

    /* complete new block or is there already a next trigger? */
    for (unsigned int i=1; i<d_multiply; i++) {
      if (trigger[i] == 1) { /* new trigger - can't use the vectors up to this trigger */
        n_consumed += i;
        consume_each(n_consumed);
        return n_produced;
      }
    }

    /* trigger */
    if (trigger[0] == 1)
      triggerout[0] = 1;
    else
      triggerout[0] = 0;

    for (unsigned int i=1; i<d_divide; i++) 
      triggerout[i] = 0;

    trigger += d_multiply;
    triggerout += d_divide;

    /* data */
    memcpy(optr, iptr, d_multiply*d_itemsize*d_vlen_in);

    iptr += d_multiply * d_itemsize * d_vlen_in;
    optr += d_divide * d_itemsize * d_vlen_out;

    n_consumed += d_multiply;
    n_produced += d_divide;
  }

  consume_each(n_consumed);
  return n_produced;
}

}
}
